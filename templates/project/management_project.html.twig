{% extends 'base.html.twig' %}

{% block title %}Digi 3 - Gestion Projets{% endblock %}

{% block body %}

{% include 'includes/header.html.twig' %}

<div class="project-management-container">
    <aside class="parameter_menu">
        <h3>Liste des projets</h3>
                <button class="create-project-button" onclick="showCreateForm()">Créer un projet</button>
        <ul>
            {% for project in projects %}
            <li class="{{ current_project and current_project.id == project.id ? 'active' : '' }}">
                <a href="{{ path('app_management_project', { 'id': project.id }) }}">
                    {{ project.name }}
                </a>
                <button type="button" class="delete-button" onclick="showDeletePopup({{ project.id }})">
                    <img src="/img/delete.png" alt="Supprimer" class="delete-icon">
                </button>
            </li>
            {% endfor %}
        </ul>
    </aside>
      
<main class="project-details">
    {% if current_project %}
        <h2>{{ current_project.name }}</h2>
        <p>{{ current_project.description }}</p>

        <div class="project-dates">
            <div>
                <span>Début prévisionnel :</span> {{ current_project.getStartDateForecast() ? current_project.getStartDateForecast().format('d-m-Y') : 'Non défini' }}
                <span>Début réel :</span> <span class="real">{{ current_project.getStartDate() ? current_project.getStartDate().format('d-m-Y') : 'Non défini' }}</span>
            </div>
            <div>
                <span>Fin prévisionnelle :</span> {{ current_project.getEndDateForecast() ? current_project.getEndDateForecast().format('d-m-Y') : 'Non défini' }}
                <span>Fin réelle :</span> <span class="real">{{ current_project.getEndDate() ? current_project.getEndDate().format('d-m-Y') : 'Non défini' }}</span>
            </div>
        </div>

        <div>
            <label>Chef de projet :</label>
            <span>
                {{ app.user ? app.user.userFirstName() ~ ' ' ~ app.user.userLastName() : 'Non défini' }}
            </span>
            <br>           
            <button class="add-task-button" onclick="showTaskForm()">Créer une tâche</button>
            {% if current_project %}
            <div id="createTaskForm" style="display: none;" class="styled-form">
                {{ form_start(taskForm) }}
                    {{ form_row(taskForm.taskName) }}
                    {{ form_row(taskForm.taskDescription) }}
                    {{ form_row(taskForm.taskType) }}
                    {{ form_row(taskForm.taskStatus) }}
                    {{ form_row(taskForm.taskCategory) }}
                    {{ form_row(taskForm.taskAttachments) }}
                    {{ form_row(taskForm.taskDateFrom) }}
                    {{ form_row(taskForm.taskDateTo) }}
                    <button type="submit">Ajouter la tâche</button>
                {{ form_end(taskForm) }}
            </div>
            {% endif %}
        </div>

        <br>

        <div class="kanban-column" data-column="a-faire">
            <h3>À faire</h3>
            <div class="kanban-tasks">
                {% for task in current_project.tasks %}
                    <div class="task-card" id="task-{{ task.id }}" draggable="true">
                        <h4>{{ task.taskName }}</h4>
                        <div class="task-info">
                            <p><strong>Description :</strong> {{ task.taskDescription }}</p>
                            <p><strong>Type :</strong> {{ task.taskType }}</p>
                            <p><strong>Statut :</strong> {{ task.taskStatus }}</p>
                            <p><strong>Catégorie :</strong> {{ task.taskCategory }}</p>
                            <p><strong>Date de début :</strong> <span>{{ task.taskDateFrom ? task.taskDateFrom.format('d-m-Y') : 'Non définie' }}</span></p>
                            <p><strong>Date de fin :</strong> <span>{{ task.taskDateTo ? task.taskDateTo.format('d-m-Y') : 'Non définie' }}</span></p>
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>


            <div class="kanban-column" data-column="en-cours">
                <h3>En cours</h3>
                <div class="kanban-tasks">
                    {# Placeholder for tasks in 'En cours' #}
                </div>
            </div>

            <div class="kanban-column" data-column="terminee">
                <h3>Terminée</h3>
                <div class="kanban-tasks">
                    {# Placeholder for tasks in 'Terminée' #}
                </div>
            </div>
        </div>

        {% else %}
            <p>Sélectionnez un projet pour voir les détails.</p>
        {% endif %}

        {# Formulaire de création de projet #}
        <div id="createProjectForm" style="display: none;" class="styled-form">
            {{ form_start(form) }}
                {{ form_row(form.name) }}
                {{ form_row(form.description) }}
                {{ form_row(form.startDateForecast) }}
                {{ form_row(form.endDateForecast) }}
                <button type="submit" class="styled-button">Créer un nouveau projet</button>
            {{ form_end(form) }}
        </div>

        {# Messages flash #}
        {% for message in app.flashes('success') %}
            <div class="alert alert-success">
                {{ message }}
            </div>
        {% endfor %}
</main>


</div>

{# Popup de confirmation de suppression #}
<div id="deletePopup" class="popup" style="display: none;">
    <div class="popup-content">
        <p>Êtes-vous sûr de vouloir supprimer ce projet ?</p>
        <button id="confirmDelete" class="confirm-button">Confirmer</button>
        <button id="cancelDelete" class="cancel-button">Annuler</button>
    </div>
</div>

<style>
    /* Style global du formulaire */
    .styled-form {
        background: #2C2C2C;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(255, 255, 255, 0.1);
        color: white;
        display: flex;
        flex-direction: column;
        gap: 15px; /* Augmentation de l'espace entre les éléments du formulaire */
        max-width: 100%;
        width: 100%;
        box-sizing: border-box;
    }

    /* Styles des champs de saisie (input, select, textarea) */
    .styled-form input, .styled-form select, .styled-form textarea {
        background: #444;
        border: none;
        padding: 12px;
        color: white;
        border-radius: 5px;
        margin-bottom: 15px; /* Ajout de l'espace entre le champ et le label */
        width: 100%;
        box-sizing: border-box;
    }

    /* Style des labels */
    .styled-form label {
        font-weight: bold;
        margin-bottom: 8px; /* Espacement entre le label et le champ */
    }

    /* Style du bouton */
    .styled-button {
        background-color: #249F84;
        border: none;
        color: white;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 5px;
        transition: background 0.3s ease;
        width: auto;
        align-self: flex-start;
    }

    /* Style du bouton au survol */
    .styled-button:hover {
        background-color: #1D8E75;
    }

    /* Responsivité pour les petits écrans */
    @media (max-width: 768px) {
        .styled-form {
            padding: 15px;
        }

        .styled-form input, .styled-form select, .styled-form textarea {
            padding: 10px;
        }

        .styled-button {
            width: 100%;
        }
    }

    /* Responsivité pour les très petits écrans */
    @media (max-width: 480px) {
        .styled-form {
            padding: 10px;
        }

        .styled-button {
            padding: 12px;
        }
    }
</style>

<style>
    .project-management-container {
        display: flex;
        background-color: #2C2C2C;
        color: #fff;
        height: 100vh;
    }

    .create-project-button {
        background-color: #249F84;
        border: none;
        color: white;
        padding: 10px 15px;
        margin-bottom: 10px;
        cursor: pointer;
        border-radius: 5px;
    }

    aside.project-list {
        background-color: #1D8E75;
        width: 250px;
        padding: 20px;
        overflow-y: auto;
        border-radius: 10px;
    }

    aside h3 {
        color: white;
        margin-bottom: 20px;
    }

    aside ul {
        list-style: none;
        padding: 0;
    }

    aside ul li {
        margin-bottom: 10px;
        padding: 10px;
        background-color: #249F84;
        border-radius: 5px;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    aside ul li.active {
        background-color: #249F84;
        border: 2px solid #00FFCC;
    }

    aside ul li a {
        color: white;
        text-decoration: none;
        flex-grow: 1;
    }

    .delete-button {
        background: none;
        border: none;
        color: white;
        cursor: pointer;
        padding: 0;
        margin-left: 10px;
    }

    .delete-icon {
        width: 25px;
        height: 25px;
    }

    main.project-details {
        flex-grow: 1;
        padding: 40px;
        background-color: #3C3C3C;
        border-radius: 10px;
    }

    main h2 {
        font-size: 24px;
        margin-bottom: 10px;
    }

    main p {
        font-size: 18px;
        margin-bottom: 20px;
    }

    .project-dates {
        display: flex;
        justify-content: space-between;
        font-size: 14px;
        margin-bottom: 30px;
    }

    .project-dates div {
        display: flex;
        flex-direction: column;
    }

    .project-dates span {
        margin-bottom: 5px;
    }

    .project-dates .real {
        color: #00FFCC;
    }

    .project-stats {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 10px;
    }

    .project-stat-block {
        background-color: #444;
        height: 150px;
        border-radius: 5px;
    }

    .alert {
        padding: 10px;
        margin-top: 20px;
        background-color: #249F84;
        color: white;
        border-radius: 5px;
    }

    /* Style global de la popup */
    .popup {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.6); /* Fond semi-transparent pour l'arrière-plan */
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 1000; /* S'assurer que la popup est au-dessus du contenu */
        padding: 10px;
        box-sizing: border-box;
    }

    /* Contenu de la popup */
    .popup-content {
        background: #2C2C2C;
        padding: 20px;
        border-radius: 8px;
        width: 100%;
        max-width: 400px; /* Largeur max pour garder la popup compacte */
        color: white;
        text-align: center;
        box-sizing: border-box;
    }

    /* Style du texte dans la popup */
    .popup-content p {
        font-size: 18px;
        margin-bottom: 20px;
    }

    /* Style des boutons de confirmation et d'annulation */
    .confirm-button, .cancel-button {
        background-color: #249F84;
        border: none;
        color: white;
        padding: 10px 20px;
        cursor: pointer;
        border-radius: 5px;
        margin: 5px;
        transition: background 0.3s ease;
        font-size: 16px;
    }

    /* Bouton de confirmation au survol */
    .confirm-button:hover {
        background-color: #1D8E75;
    }

    /* Bouton d'annulation au survol */
    .cancel-button:hover {
        background-color: #E74C3C;
    }

    /* Responsivité pour les petits écrans */
    @media (max-width: 768px) {
        .popup-content {
            padding: 15px;
            max-width: 90%; /* Ajuster la largeur sur petits écrans */
        }

        .confirm-button, .cancel-button {
            width: 100%;
            padding: 12px;
        }
    }

    /* Responsivité pour les très petits écrans */
    @media (max-width: 480px) {
        .popup-content {
            max-width: 95%;
            padding: 10px;
        }

        .confirm-button, .cancel-button {
            padding: 10px;
        }
    }


    .confirm-button, .cancel-button {
        margin: 10px;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .confirm-button {
        background-color: #28a745;
        color: white;
    }

    .cancel-button {
        background-color: #dc3545;
        color: white;
    }

    .task-cards {
    display: flex;
    flex-wrap: wrap;
    gap: 16px; /* Espace entre les cartes */
    }

    .task-card {
        flex: 1 1 calc(20% - 16px); /* 20% pour 5 cartes par ligne */
        box-sizing: border-box;
        border: 1px solid #ddd;
        padding: 16px;
        background-color: #3C3C3C;
        border-radius: 4px;
    }

    .task-card {
        background-color: #3C3C3C;
        border: 2px solid #fff; /* White border */
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        padding: 30px;
        margin: 30px auto;
        max-width: 800px;
        font-family: 'Arial', sans-serif;
        color: #fff;
    }

    .task-card h1 {
        font-size: 26px;
        color: #00FFCC; /* Greenish color for the title */
        margin-bottom: 20px;
        font-weight: bold;
    }

    .task-info p {
        font-size: 18px;
        margin: 12px 0;
        color: black; /* White color for text */
    }

    .task-info strong {
        color: #00FFCC; /* Greenish color for strong labels */
    }

    .task-info p span {
        font-weight: bold;
        color: black;
    }

    .task-info p:last-child {
        margin-bottom: 0;
    }

    .clearfix {
    clear: both;
    }

    /* Styles pour le kanban */
.kanban-board {
    display: flex;
    flex-direction: row;
    gap: 20px; /* Espacement entre les colonnes */
    margin-top: 20px;
    overflow-x: auto; /* Permet le défilement horizontal si le nombre de colonnes augmente */
}

.kanban-column {
    flex: 1 0 300px; /* Largeur fixe des colonnes avec une flexibilité minimale */
    background-color: #f4f4f4;
    border: 1px solid #ccc;
    border-radius: 8px;
    padding: 10px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

.kanban-column h3 {
    text-align: center;
    font-size: 18px;
    color: #333;
    margin-bottom: 10px;
}

.kanban-tasks {
    display: flex;
    flex-direction: column;
    gap: 10px; /* Espacement entre les cartes */
}

.task-card {
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.task-card h4 {
    font-size: 16px;
    margin-bottom: 5px;
    color: #222;
}

.task-info p {
    font-size: 14px;
    margin: 2px 0;
}

/* Boutons */
.add-column-button, .add-task-button {
    display: inline-block;
    margin-top: 20px;
    padding: 10px 15px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.3s ease;
}

.add-column-button:hover, .add-task-button:hover {
    background-color: #0056b3;
}

</style>

<script>
    function showCreateForm() {
        document.getElementById('createProjectForm').style.display = 'block';
    }

    function showCreateTaskForm() {
        document.getElementById('createTaskForm').style.display = 'block';
    }

    document.addEventListener('DOMContentLoaded', function () {
        let projectIdToDelete;

        window.showDeletePopup = function (projectId) {
            projectIdToDelete = projectId;
            document.getElementById('deletePopup').style.display = 'flex';
        };

        document.getElementById('confirmDelete').onclick = function () {
            if (!projectIdToDelete) {
                console.error('Aucun ID de projet à supprimer.');
                return;
            }

            const form = document.createElement('form');
            form.method = 'post';
            form.action = "{{ path('app_project_delete', { 'id': '0' }) }}".replace('0', projectIdToDelete);

            document.body.appendChild(form);
            form.submit();
        };

        document.getElementById('cancelDelete').onclick = function () {
            document.getElementById('deletePopup').style.display = 'none';
        };
    });
</script>
<script>
    function showTaskForm() {
        document.getElementById('createTaskForm').style.display = 'block';
    }

    function showCreateForm() {
        document.getElementById('createProjectForm').style.display = 'block';
    }

    function showDeletePopup(projectId) {
        const deletePopup = document.getElementById('deletePopup');
        deletePopup.style.display = 'block';

        document.getElementById('confirmDelete').onclick = function () {
            window.location.href = `/delete-project/${projectId}`;
        };

        document.getElementById('cancelDelete').onclick = function () {
            deletePopup.style.display = 'none';
        };
    }
</script>
<script>
    function addColumn() {
        const columnContainer = document.getElementById('kanbanColumns');
        const columnName = prompt('Entrez le nom de la nouvelle colonne :');
        if (columnName) {
            // Créer une nouvelle colonne
            const newColumn = document.createElement('div');
            newColumn.classList.add('kanban-column');
            newColumn.setAttribute('data-column', columnName.toLowerCase().replace(/\s+/g, '-'));
            newColumn.innerHTML = `
                <h3>${columnName}</h3>
                <div class="kanban-tasks"></div>
            `;
            columnContainer.appendChild(newColumn);
        }
    }
</script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const tasks = document.querySelectorAll('.task-card');
        const columns = document.querySelectorAll('.kanban-column');

        tasks.forEach(task => {
            task.draggable = true;

            task.addEventListener('dragstart', (e) => {
                e.dataTransfer.setData('taskId', task.dataset.taskId);
            });
        });

        columns.forEach(column => {
            column.addEventListener('dragover', (e) => {
                e.preventDefault(); // Autoriser le drop
            });

            column.addEventListener('drop', (e) => {
                e.preventDefault();
                const taskId = e.dataTransfer.getData('taskId');
                const newStatus = column.dataset.column;

                // Déplacer visuellement la tâche
                const task = document.querySelector(`.task-card[data-task-id="${taskId}"]`);
                column.querySelector('.kanban-tasks').appendChild(task);

                // Envoyer la modification au serveur
                fetch('/management-project/update-task-status', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        taskId: taskId,
                        newStatus: newStatus,
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        alert(data.error);
                    } else {
                        console.log(data.success);
                    }
                })
                .catch(error => {
                    console.error('Erreur:', error);
                });
            });
        });
    });
</script>

{% endblock %}
